// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc295.Grizzlynator2017;

import org.usfirst.frc295.Grizzlynator2017.commands.AutonomousCommand;
import org.usfirst.frc295.Grizzlynator2017.commands.CmdAgitator;
import org.usfirst.frc295.Grizzlynator2017.commands.CmdDriveTrainShifterSetHigh;
import org.usfirst.frc295.Grizzlynator2017.commands.CmdDriveTrainShifterSetLow;
import org.usfirst.frc295.Grizzlynator2017.commands.CmdGearMechanismOpenWhileHeld;
import org.usfirst.frc295.Grizzlynator2017.commands.CmdIntakeSetPercentVbusWhileHeld;
import org.usfirst.frc295.Grizzlynator2017.commands.CmdLiftSetSpeedWhileHeld;
import org.usfirst.frc295.Grizzlynator2017.commands.CmdShooterSetSpeedWhileHeld;

import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI
{
	//// CREATING BUTTONS
	// One type of button is a joystick button which is any button on a
	//// joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	//// TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());

	private JoystickDriver _joystickDriver = new JoystickDriver(0, JoystickDriver.JoystickType.XBOX);
	// = new JoystickDriver(0, JoystickDriver.JoystickType.LOGITECH);

	private JoystickOperator _joystickOperator = new JoystickOperator(1, JoystickOperator.JoystickType.XBOX);
	// = new JoystickOperator(1, JoystickOperator.JoystickType.LOGITECH);


	public OI()
	{
		// =====================================================================
		// SMART DASHBOARD COMMANDS
		// =====================================================================

		// SmartDashboard Button to start the Autonomous Command
		SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

		// =====================================================================
		// DRIVER JOYSTICK BUTTON COMMANDS
		// =====================================================================
		JoystickButton _btnDriverA = _joystickDriver.getDriveTrainShifterSetLowButton();
		_btnDriverA.whenPressed(new CmdDriveTrainShifterSetLow());
		SmartDashboard.putData("CMD Shift Slow", new CmdDriveTrainShifterSetLow());

		JoystickButton _btnDriverY = _joystickDriver.getDriveTrainShifterSetHighButton();
		_btnDriverY.whenPressed(new CmdDriveTrainShifterSetHigh());
		SmartDashboard.putData("CMD Shift Fast", new CmdDriveTrainShifterSetHigh());

		// =====================================================================
		// OPERATOR JOYSTICK BUTTON COMMANDS
		// =====================================================================
		JoystickButton _btnOpShooterOn = _joystickOperator.getShooterOnButton();
		_btnOpShooterOn.whileHeld(new CmdShooterSetSpeedWhileHeld(0.9));
		SmartDashboard.putData("CMD Shooter 0.9", new CmdShooterSetSpeedWhileHeld(0.9));

		JoystickButton _btnOpLiftOn = _joystickOperator.getLiftRaise();
		_btnOpLiftOn.whileHeld(new CmdLiftSetSpeedWhileHeld(.6));
		SmartDashboard.putData("CMD Lift @ 0.4", new CmdLiftSetSpeedWhileHeld(.75));

		JoystickButton _btnOpIntakeOn = _joystickOperator.getIntake();
		_btnOpIntakeOn.whileHeld(new CmdIntakeSetPercentVbusWhileHeld(0.8));
		SmartDashboard.putData("CMD Intake @ 0.8", new CmdLiftSetSpeedWhileHeld(0.8));

		JoystickButton _btnOpGearOpenOn = _joystickOperator.getAgitator();
		_btnOpGearOpenOn.whileHeld(new CmdAgitator(.6));
		SmartDashboard.putData("CMD Gear Arm Open", new CmdAgitator(.6));

	}


	public JoystickDriver getJoystickDriver()
	{
		return _joystickDriver;
	}


	public JoystickOperator getJoystickOperator()
	{
		return _joystickOperator;
	}

}
